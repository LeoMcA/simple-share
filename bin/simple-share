#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var WebSocket = require('ws');
var crypto = require('crypto');

var common = require('../lib/common.js');

common.setWebrtc(require('wrtc'));

var fileName;

program
  .version('0.0.0')

program
  .option('-s, --server [url:port]', 'Signalling server to use')
  .option('-c, --client [url]', 'Path to client')
  .option('-i, --sid [sid]', 'Server id')
  .arguments('[file]')
  .action(function(file){
    fileName = file;
    if(program.sid){
      //we're a client
      common.setClient(true);
      common.setSid(program.sid);
      if(program.server)
        var ws = common.setSignalling(new WebSocket('ws://' + program.server));
      else
        var ws = common.setSignalling(new WebSocket('ws://simple-share.mca.me.uk'));
      ws.on('error', function(err){
        common.onError(err);
      });
      ws.on('open', function(){
        common.onSignallingConnect();
      });
      ws.on('message', function(data){
        common.onSignallingMessage(data, clientOnDataChannel);
      });
    } else {
      //we're a server
      fs.stat(fileName, function(err, stats){
        if(err) common.onError(err);
        fs.readFile(fileName, function(err, data){
          if(err) common.onError(err);

          fileBuffer = common.setFileBuffer(data, data.length);

          var sid = common.setSid(createHexHash('sha-1', fileBuffer));

          if(program.server){
            if(program.client)
              console.log(program.client + '?s=' + program.server + '&i=' + sid);
            else
              console.log('http://' + program.server + '/client.html?s=' + program.server + '&i=' + sid);
            var ws = common.setSignalling(new WebSocket('ws://' + program.server));
          } else {
            console.log('http://simple-share.mca.me.uk/client.html?s=simple-share.mca.me.uk&i=' + sid);
            var ws = common.setSignalling(new WebSocket('ws://simple-share.mca.me.uk'));
          }
          ws.on('error', function(err){
            common.onError(err);
          });
          ws.on('open', function(){
            common.onSignallingConnect();
          });
          ws.on('message', function(data){
            common.onSignallingMessage(data, serverOnDataChannel);
          });
        });
      });
    }
  });

program.parse(process.argv);

if(typeof fileName === 'undefined'){
  console.error('No file specified!');
  process.exit(1);
}

function serverOnDataChannel(dc){
  //dc.send(new Uint8Array(fileBuffer));
  console.log('dc open');
  for(var i = 0; i <= fileBuffer.length; i += 66528){
    dc.send(new Uint8Array(fileBuffer.slice(i, i + 66528)));
  }
}

function clientOnDataChannel(dc){
  console.log('dc open');
  var bufferLength = 0;
  var bufferArray = [];
  dc.onmessage = function(data){
    bufferLength += data.data.byteLength;
    bufferArray.push(new Buffer(new Uint8Array(data.data)));
    if(bufferLength >= common.fileLength) {
      fs.writeFile(fileName, Buffer.concat(bufferArray, bufferLength), function(err){
        if(err) common.onError(err);
        console.log('SAVED!');
      });
    }
  }
}

function createHexHash(algo, data){
  return crypto
    .createHash('sha1')
    .update(data)
    .digest('hex')
}
